// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTorSpectator.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NTorSpectator.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230708103126_CombinedReports")]
    partial class CombinedReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NTorSpectator.Database.Models.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ObservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObservedAt");

                    b.HasIndex("ReportId");

                    b.HasIndex("SiteId");

                    b.ToTable("observations", (string)null);
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.ObservationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SiteUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SiteUri");

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.SiteAvailabilityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OccuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("OccuredAt");

                    b.HasIndex("ReportId");

                    b.HasIndex("SiteId");

                    b.ToTable("availability_events", (string)null);
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.Observation", b =>
                {
                    b.HasOne("NTorSpectator.Database.Models.ObservationReport", null)
                        .WithMany("Observations")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NTorSpectator.Database.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.SiteAvailabilityEvent", b =>
                {
                    b.HasOne("NTorSpectator.Database.Models.ObservationReport", null)
                        .WithMany("Events")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NTorSpectator.Database.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("NTorSpectator.Database.Models.ObservationReport", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Observations");
                });
#pragma warning restore 612, 618
        }
    }
}
